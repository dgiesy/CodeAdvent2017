'''
Created on Dec 16, 2017

@author: Zog
'''
import unittest
from deFrag.ddfrag import asciiToDecimal, hex_to_bin, update_first_row,\
    convert_to_groups, total_used_cells, compare_with_above
from hashKnots.hashChecker import hash_checker

class Test(unittest.TestCase):


    def testHexToBin(self):
        testSeed = "a0c2017"
        hexVersion = hex_to_bin(testSeed)
        
        pass

    def testInitFirstRow(self):
        testKey = "flqrgnkx-0"
        knotHash = hash_checker(testKey)
        hashInBin,hashArray = hex_to_bin(knotHash)
        testArray = []
        for i in hashInBin:
            testArray.append(i)
        print("Hash Array:  " + str(testArray))
        convertedRow, groupCount = update_first_row(testArray,1)
        firstRow = ["1","1","0","0","1","0","1","0","1","1","0","1","0","0","0","1","0","1","0","0","0","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","0","1","1","1","0","1","1","0","1","0","0","1","0","1","1","0","0","1","1","1","1","0","0","1","0","0","1","0","0","0","0","1","0","1","0","1","1","1","0","1","0","1","1","0","0","0","0","0","1","1","1","0","0","0","0","0","0","1","1","0","0","1","1","1","0","0","1","1","1","1","0","1","1","0","1","0","0","1","0","1","0","1","0","0","0","1","0","0","0","1"]
        convertedRow2, groupCount2 = update_first_row(firstRow,1)
        print("FirstRow: " + str(convertedRow))
        print("Group Count: " + str(groupCount))
        print("FirstRow2: " + str(convertedRow2))
        print("Group Count2: " + str(groupCount2))
        pass
    
    def testConvertToGroups(self):
#         firstRow = ["1","1","0","0","1","0","1","0","1","1","0","1","0","0","0","1","0","1","0","0","0","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","0","1","1","1","0","1","1","0","1","0","0","1","0","1","1","0","0","1","1","1","1","0","0","1","0","0","1","0","0","0","0","1","0","1","0","1","1","1","0","1","0","1","1","0","0","0","0","0","1","1","1","0","0","0","0","0","0","1","1","0","0","1","1","1","0","0","1","1","1","1","0","1","1","0","1","0","0","1","0","1","0","1","0","0","0","1","0","0","0","1"]
#         secondRow = ["0","0","0","1","0","0","0","0","0","1","0","1","0","1","0","1","0","0","1","0","0","0","0","1","0","0","1","0","0","0","1","1","0","0","0","1","0","0","1","1","0","1","1","1","1","0","0","0","0","1","0","0","0","0","1","0","0","1","1","0","0","0","0","0","0","0","0","0","1","1","1","0","1","0","0","0","1","1","1","1","0","1","0","0","0","1","1","1","0","1","1","0","1","1","1","0","0","0","0","0","1","0","0","1","1","0","1","0","0","1","0","1","1","1","1","0","0","0","0","0","1","1","1","0","1","0","1","0"]
#         matrix = [firstRow,secondRow]       
#         convert_to_groups(matrix)
        testKey = "flqrgnkx-"
        grandTotal, stringRows, arrayRows = total_used_cells(testKey)
        totalGroups = convert_to_groups(arrayRows)
        for i in stringRows:
            print(str(i))
        for i in arrayRows:
            print(str(i))
        print("total groups: " + str(totalGroups))
        assert(totalGroups == 1242)
        pass
    
    def testTotalUsedCells(self):
        testKey = "flqrgnkx-"
        grandTotal, stringRows, arrayRows = total_used_cells(testKey)
        assert(grandTotal == 8108)
        pass
    
    def testCompareWithAbove(self):
#         ['1', '1', '0', '2', '0', '3', '0', '0', '4', '4', '4', '4', '0', '5', '5', '5', '0', '6', '6', '0', '7', '0', '8', '8', '8', '8', '0', '9', '9', '9', '0', '0', '10', '0', '10', '10', '10', '11', '11', '11', '11', '0', '0', '0', '0', '0', '11', '12', '12', '0', '0', '0', '13', '13', '13', '13', '13', '0', '0', '0', '0', '14', '0', '0', '0', '0', '0', '15', '0', '15', '16', '0', '17', '17', '0', '0', '18', '18', '0', '0', '19', '19', '19', '19', '19', '0', '20', '0', '21', '0', '0', '0', '22', '0', '23', '23', '23', '23', '0', '0', '0', '24', '24', '0', '25', '25', '0', '26', '0', '0', '0', '27', '27', '27', '27', '27', '27', '0', '0', '28', '28', '28', '28', '0', '0', '29', '29', '0'],
#         ['1','1','0','2','0','3','0','0','4','4','4','4','0','5','5','5','0','6','6','0','7','0','8','8','8','8','0','9','9','9','0','0','10','0','11','11','11','11','11','11','11','0','0','0','0','0','12','12','12','0','0','0','13','13','13','13','13','0','0','0','0','14','0','0','0','0','0','15','0','16','16','0','17','17','0','0','18','18','0','0','19','19','19','19','19','0','20','0','21','0','0','0','22','0','23','23','23','23','0','0','0','24','24','0','25','25','0','26','0','0','0','27','27','27','27','27','27','0','0','28','28','28','28','0','0','29','29','0']
#         ["1","1","0","0","2","0","3","0","4","4","0","5","0","0","0","6","0","7","0","0","0","0","8","8","8","8","8","8","8","8","8","0","9","9","0","10","10","10","0","11","11","11","0","12","12","0","13","0","0","14","0","15","15","0","0","16","16","16","16","0","0","17","0","0","18","0","0","0","0","19","0","20","0","21","21","21","0","22","0","23","23","0","0","0","0","0","24","24","24","0","0","0","0","0","0","25","25","0","0","26","26","26","0","0","27","27","27","27","0","28","28","0","28","0","0","29","0","30","0","31","0","0","0","32","0","0","0","33"]
#         ['1','1','0','1','0','1','0','0','1','1','1','1','0','1','1','1','0','1','1','0','1','0','1','1','1','1','0','1','1','1','0','0','1','0','1','1','1','1','1','1','1','0','0','0','0','0','1','1','1','0','0','0','1','1','1','1','1','0','0','0','0','1','0','0','0','0','0','1','0','1','1','0','1','1','0','0','1','1','0','0','1','1','1','1','1','0','1','0','1','0','0','0','1','0','1','1','1','1','0','0','0','1','1','0','1','1','0','1','0','0','0','1','1','1','1','1','1','0','0','1','1','1','1','0','0','1','1','0']
        allArrays = [['1','1','0','1','0','1','0','0','1','1','1','1','0','1','1','1','0','1','1','0','1','0','1','1','1','1','0','1','1','1','0','0','1','0','1','1','1','1','1','1','1','0','0','0','0','0','1','1','1','0','0','0','1','1','1','1','1','0','0','0','0','1','0','0','0','0','0','1','0','1','1','0','1','1','0','0','1','1','0','0','1','1','1','1','1','0','1','0','1','0','0','0','1','0','1','1','1','1','0','0','0','1','1','0','1','1','0','1','0','0','0','1','1','1','1','1','1','0','0','1','1','1','1','0','0','1','1','0'],
            ["0","1","0","1","0","1","0","1","1","1","1","0","1","0","1","0","1","0","1","1","0","0","1","1","1","1","0","0","0","1","0","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","0","0","0","0","1","0","1","1","0","1","1","0","1","1","1","0","0","1","1","1","0","1","1","0","0","0","0","1","0","1","1","0","0","0","1","1","0","0","1","1","0","1","1","0","1","1","1","0","1","1","0","1","0","0","0","1","0","0","1","1","0","0","1","0","0","0","1","1","0","0","1","0","0"],
            ["0","0","0","0","1","0","1","0","1","1","0","1","1","1","1","1","0","0","0","1","0","0","1","1","1","1","1","1","1","0","1","0","0","1","0","0","0","0","0","0","1","1","1","0","1","0","0","0","1","1","1","0","1","0","1","0","1","0","0","0","0","0","0","1","0","1","0","1","0","0","1","1","0","1","1","1","0","1","1","0","0","1","1","1","0","1","1","1","0","1","1","0","1","0","1","0","1","1","1","1","0","0","1","1","1","0","1","1","0","1","1","1","1","0","1","1","0","0","1","0","0","0","1","1","0","0","0","1"]]
#             ["1","0","1","0","1","1","0","1","0","0","1","1","1","1","0","1","1","0","1","0","0","0","1","0","1","0","0","0","1","1","0","0","1","1","0","1","0","1","1","1","1","0","1","1","1","0","0","0","1","1","1","1","1","0","1","1","1","0","0","1","1","0","0","1","0","1","1","1","0","1","0","0","0","0","1","0","1","1","0","0","0","0","0","0","1","1","1","0","0","1","1","0","0","0","1","1","0","1","1","0","0","1","1","1","0","0","1","0","1","1","0","0","1","0","1","0","1","1","1","1","0","1","1","0","0","0","1","0"],
#             ["0","1","1","0","1","0","0","0","0","0","1","0","1","1","1","1","1","1","1","0","0","1","0","0","1","0","0","0","1","1","0","0","0","1","0","1","0","1","0","1","1","0","0","0","0","1","1","1","0","1","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","0","0","0","1","0","0","0","1","1","1","0","1","1","1","1","1","0","0","1","0","0","1","1","0","0","0","1","1","0","1","0","0","1","1","1","1","1","0","0","1","0","1","1","0","1","1","0","1","0","0","1","1","0","0","0","1","1","0","1","0"],
#             ["1","1","0","0","1","0","0","1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","0","0","0","1","1","0","0","1","0","0","1","0","1","0","0","1","0","1","0","1","1","0","0","1","0","1","1","1","1","1","1","0","0","1","1","1","1","0","1","0","0","1","0","1","0","0","1","1","1","1","0","0","1","1","0","0","1","0","0","0","1","1","1","0","1","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1","0","0","1","0","1","0","0","1","0","1","1"],
#             ["0","1","0","0","0","1","0","0","1","1","0","0","0","0","0","0","0","0","0","1","1","0","1","0","0","1","1","1","0","0","1","0","0","1","1","0","0","0","1","0","0","1","1","0","1","1","0","0","1","1","1","0","1","1","1","0","0","0","0","0","1","1","1","0","0","0","1","1","1","0","1","1","1","1","0","0","0","0","0","0","1","1","1","0","1","0","0","0","1","0","0","1","1","0","0","0","1","0","0","0","1","1","0","1","0","0","0","1","0","0","1","1","0","1","1","1","0","1","0","0","0","1","1","0","0","0","1","1"],
#             ["1","1","0","1","0","1","1","0","0","1","1","1","0","0","1","0","0","0","1","1","0","1","1","0","0","0","0","0","1","0","0","0","0","0","1","1","0","0","0","0","1","1","0","0","0","1","1","0","0","0","1","1","1","0","0","1","0","1","0","0","1","0","0","1","0","1","0","0","0","1","1","0","1","0","1","0","1","1","0","0","1","1","0","1","1","0","0","1","0","0","1","1","0","1","1","1","0","1","1","1","0","1","1","0","0","1","0","1","1","1","1","0","0","0","0","0","0","1","1","0","0","0","1","1","0","1","1","0"],
#             ["1","1","1","1","0","1","1","1","1","1","1","0","0","1","1","1","0","0","1","0","1","0","0","1","0","1","0","1","1","1","1","1","1","1","0","0","1","0","1","1","1","0","1","0","1","1","0","0","1","1","0","1","0","0","1","1","0","0","0","0","0","0","0","1","0","0","1","1","1","0","1","1","0","1","0","1","1","1","0","0","1","0","0","1","1","1","1","0","1","0","0","1","0","1","0","0","1","1","0","0","0","0","1","1","1","0","0","0","0","0","0","1","0","1","1","0","1","1","1","1","1","0","0","1","0","0","1","1"],
#             ["1","1","0","1","0","1","1","1","1","0","0","0","0","0","0","1","1","0","0","0","1","1","1","0","0","0","0","0","1","1","1","1","0","0","1","1","1","0","1","1","0","0","1","1","1","0","0","0","1","0","1","1","1","1","0","1","0","0","0","0","0","0","1","0","1","0","1","1","1","0","0","1","1","0","1","0","0","0","1","0","1","0","0","1","0","1","0","1","1","0","0","0","0","0","1","0","1","1","1","1","1","0","0","1","1","0","0","1","0","1","1","1","1","0","0","1","1","0","0","0","1","0","0","1","0","0","0","1"],
#             ["0","0","0","1","0","0","0","0","1","0","1","1","0","0","1","0","0","1","0","1","0","0","0","1","0","1","1","0","0","0","0","1","1","1","0","1","1","1","1","0","1","1","0","1","1","0","1","0","0","1","1","1","0","1","1","0","0","0","1","1","0","1","1","0","0","1","0","0","0","1","0","0","0","1","1","1","0","0","0","1","0","0","0","1","1","1","1","0","0","0","1","0","1","0","0","1","0","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0","0","1","0","0","1","1","1","0","0","0","1","0","0","1","0"],
#             ["0","1","1","1","1","1","1","1","1","1","1","1","0","0","0","0","1","0","0","1","0","0","0","1","0","1","1","1","1","0","0","1","1","1","1","0","1","0","0","0","1","1","1","0","1","0","0","1","0","1","1","0","1","1","1","1","0","1","1","0","0","1","1","1","0","1","0","0","1","1","0","1","1","0","0","1","1","1","1","0","0","1","1","0","0","0","0","0","0","1","1","0","0","0","1","0","1","1","0","0","0","1","0","0","0","0","1","0","0","0","1","0","0","1","1","1","0","0","1","1","0","0","1","0","1","0","1","0"]]

        nextGroup = 1
        i = 0
        while i < len(allArrays):
            print("i currently =: " + str(i))
            if i == 0:
                firstRowOrig = allArrays[i][:]
                firstRowCopy,nextGroup = update_first_row(firstRowOrig, nextGroup)
                allArrays[i] = firstRowCopy
                i += 1
                continue
            topOrig = allArrays[i-1][:]
            bottomOrig = allArrays[i][:]
            topCopy, bottomCopy, nextGroup = compare_with_above(topOrig,bottomOrig, nextGroup)
            allArrays[i-1] = topCopy
            allArrays[i] = bottomCopy
            print("Original Top: " + str(topOrig))
            print("top Copy    : " + str(topCopy))
#             print("Original Bottom: " + str(bottomOrig))
#             print("bottom Copy    : " + str(bottomCopy))
#             print("ending next Group: " + str(nextGroup))
#             print("The top row was changed: " + str(changedTop))
            if topOrig == topCopy:
                i+=1
            else:
                for k in allArrays:
                    print(str(k))
                i-=1    
#             print("Now i = " + str(i))
        for k in allArrays:
            print(str(k))
        
#         for i in range(len(allArrays)-1):
#             topOrig = allArrays[i][:]
#             bottomOrig = allArrays[i+1][:]
#             topCopy, bottomCopy, nextGroup, changedTop = compare_with_above(topOrig,bottomOrig, nextGroup)
#             allArrays[i] = topCopy
#             allArrays[i+1] = bottomCopy
#             print("Original Top: " + str(topOrig))
#             print("top Copy    : " + str(topCopy))
#             print("Original Bottom: " + str(bottomOrig))
#             print("bottom Copy    : " + str(bottomCopy))
#             print("ending next Group: " + str(nextGroup))
#             print("The top row was changed: " + str(changedTop))        
        
        pass
    
    def testArrayCompare(self):
        ArrOne = ['1', '1', '0', '2', '0', '3', '0', '0', '4', '4', '4', '4', '0', '5', '5', '5', '0', '6', '6', '0', '7', '0', '8', '8', '8', '8', '0', '9', '9', '9', '0', '0', '10', '0', '10', '10', '10', '11', '11', '11', '11', '0', '0', '0', '0', '0', '11', '12', '12', '0', '0', '0', '13', '13', '13', '13', '13', '0', '0', '0', '0', '14', '0', '0', '0', '0', '0', '15', '0', '15', '16', '0', '17', '17', '0', '0', '18', '18', '0', '0', '19', '19', '19', '19', '19', '0', '20', '0', '21', '0', '0', '0', '22', '0', '23', '23', '23', '23', '0', '0', '0', '24', '24', '0', '25', '25', '0', '26', '0', '0', '0', '27', '27', '27', '27', '27', '27', '0', '0', '28', '28', '28', '28', '0', '0', '29', '29', '0']
        ArrTwo = ['1', '1', '0', '2', '0', '3', '0', '0', '4', '4', '4', '4', '0', '5', '5', '5', '0', '6', '6', '0', '7', '0', '8', '8', '8', '8', '0', '9', '9', '9', '0', '0', '10', '0', '10', '10', '10', '11', '11', '11', '11', '0', '0', '0', '0', '0', '11', '12', '12', '0', '0', '0', '13', '13', '13', '13', '13', '0', '0', '0', '0', '14', '0', '0', '0', '0', '0', '15', '0', '15', '16', '0', '17', '17', '0', '0', '18', '18', '0', '0', '19', '19', '19', '19', '19', '0', '20', '0', '21', '0', '0', '0', '22', '0', '23', '23', '23', '23', '0', '0', '0', '24', '24', '0', '25', '25', '0', '26', '0', '0', '0', '27', '27', '27', '27', '27', '27', '0', '0', '28', '28', '28', '28', '0', '0', '29', '29', '0']
        if ArrOne == ArrTwo:
            print("They look the same to me")
        else:
            print("I'm smoking crack")
            
    
if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testHexToBin']
    unittest.main()